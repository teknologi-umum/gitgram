import { z } from "zod";
import type { IVulnerabilityEvent } from "~/application/interfaces/events";
import type { HandlerFunction } from "~/application/webhook/types";
import type { IPresenter } from "~/application/interfaces/IPresenter";
import { interpolate } from "~/utils/interpolate";

export const vulnerabilityTemplateSchema = z.object({
  created: z.object({
    severity: z.record(z.string().trim()),
    base: z.string().trim()
  })
});

export type VulnerabilityTemplate = z.infer<typeof vulnerabilityTemplateSchema>;

export class VulnerabilityEventHandler implements IVulnerabilityEvent {
  // eslint-disable-next-line no-useless-constructor
  constructor(private readonly _templates: VulnerabilityTemplate, private readonly _hub: IPresenter) {}

  created(): HandlerFunction<"repository_vulnerability_alert.create"> {
    return (event) => {
      const response = interpolate(this._templates.created.base, {
        repoName: event.payload.repository.fullName,
        affectedPackage: event.payload.alert.affectedPackageName,
        affectedRange: event.payload.alert.affectedPackageName,
        fixedIn: event.payload.alert.fixedIn,
        severity: event.payload.alert.severity
          ? this._templates.created.severity[event.payload.alert.severity]
          : "Not available",
        externalRef: event.payload.alert.externalIdentifier,
        externalUrl: event.payload.alert.externalReference
      });

      this._hub.send({
        event: "repository_vulnerability_alert.create",
        targetsId: event.targetsId,
        payload: response
      });
    };
  }
}